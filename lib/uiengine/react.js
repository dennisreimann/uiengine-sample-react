const { invalidateModuleCache, upcaseFirstChar } = require('./util')
const ReactDOMServer = require('react-dom/server')

// set up require hooks for jsx and css modules
require('@babel/register')({
  presets: [
    '@babel/preset-env',
    '@babel/preset-stage-2',
    '@babel/preset-react'
  ],
  plugins: [
    ['css-modules-transform', {
      // matches webpack css-loader default, which is used by @zeit/next-css.
      // this is necessary, because we are using the styles generated by next.
      generateScopedName: '[hash:base64]'
    }]
  ]
})

const registerComponentFile = async function (options, filePath) {
  invalidateModuleCache(filePath)
}

const render = async function (options, filePath, data = {}) {
  try {
    invalidateModuleCache(filePath)
    let template = require(filePath)
    if (template.default) template = template.default
    const vdom = template(data)
    const rendered = ReactDOMServer.renderToString(vdom)

    return rendered
  } catch (err) {
    const message = [`React DOM could not render "${filePath}"!`, err.stack]

    if (options.debug) message.push(JSON.stringify(data, null, 2))

    throw new Error(message.join('\n\n'))
  }
}

const filesForComponent = function (componentName) {
  const name = upcaseFirstChar(componentName)

  return [
    {
      basename: `${name}.js`,
      data: `import React from 'react'

const ${name} = props => {
  return (
    <div className='${componentName}'>
      {props.children}
    </div>
  )
}

export default ${name}
`
    }
  ]
}

const filesForVariant = function (componentName, variantName) {
  const cName = upcaseFirstChar(componentName)
  const vName = upcaseFirstChar(variantName)

  return [
    {
      basename: `${vName}.js`,
      data: `import React from 'react'
import ${cName} from '../${cName}.js'

export default props => (
  <${cName} />
)
`
    }
  ]
}

module.exports = {
  registerComponentFile,
  render,
  filesForComponent,
  filesForVariant
}
